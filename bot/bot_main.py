import time
import os
import telebot
import schedule
import multiprocessing as mp
from chatbot import chatbot
from bot import callbacks
from sql import sql_requests
from yadisk_getter import yadisk_getter
from vkontakte import vk_getter
from sql import mark_words

saved_id = 3177

admin_id = int(os.environ["ADMIN_ID"])
admin_ids = list(map(int, os.environ["ADMIN_IDS"].split()))
token = os.environ["TG_TOKEN"]


bot = telebot.TeleBot(token)

def scheduled_update():
    global saved_id
    try:
        if vk_getter.check_last_not_pinned() != saved_id:
            users = sql_requests.users_list()
            for id, notif in users.items():
                try:
                    if notif:
                        list_of_photos, text = vk_getter.get_last_not_pinned()
                        bot.send_media_group(id, list_of_photos)
                        bot.send_message(id, text)
                except Exception as e:
                    bot.send_message(admin_id, str(e))
            saved_id = vk_getter.check_last_not_pinned()
    except Exception as e:
        bot.send_message(admin_id, str(e))

def run_scheduler():
    schedule.every(30).minutes.do(scheduled_update)
    while True:
        schedule.run_pending()
        time.sleep(1)

def starter():
    @bot.message_handler(commands=['start'])
    def start_message(message):
        callbacks.start_message(bot, message)
        try:
            sql_requests.check_user(message)
        except Exception as e:
            bot.send_message(admin_id, str(e))

    @bot.message_handler(commands=['help'])
    def start_message(message):
        callbacks.help_message(bot, message)

    @bot.message_handler(commands=['about'])
    def start_message(message):
        callbacks.about_message(bot, message)

    @bot.message_handler(content_types=['photo', 'audio', 'sticker', 'video'])
    def send_chatbot_photo(message):
        message_id = message.chat.id
        bot.send_message(message_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–∫–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)")

    @bot.message_handler(content_types=['text'])
    def ultimate(message):
        user_message = message.text.lower()
        message_id = message.chat.id
        if message.text == "üè†–î–æ–º–æ–πüè†":
            callbacks.home_page(bot, message)
        elif message.text == "üìñ–£—á–µ–±–Ω–∏–∫–∏üìñ":
            bot.send_message(message_id, yadisk_getter.get_all_books())
        elif message.text == "üé≠–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—èüé≠":
            if message.from_user.id in admin_ids:
                bot.send_message(message_id, sql_requests.get_all_events())
                callbacks.events_admin(bot, message)
            else:
                text = mark_words.get_5_nearest()
                bot.send_message(message_id, text)
        elif message.text == "‚úÖ–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏‚úÖ" or message.text == "‚ùå–í—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏‚ùå":
            sql_requests.change_notif(message_id)
            callbacks.change_notif(bot, message)
        elif message.text == "‚ùå–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ‚ùå":
            msg = bot.send_message(message_id, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
            bot.register_next_step_handler(msg, deleting_sql)
        elif message.text == "üü°–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µüü°":
            msg = bot.send_message(message_id, "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n–ì–ì–ì–ì-–ú–ú-–î–î\n(–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)")
            bot.register_next_step_handler(msg, updating_sql)

        elif "10" in user_message and "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫" in user_message:
            bot.send_message(message_id, yadisk_getter.info_10())
        elif "11" in user_message and "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫" in user_message:
            bot.send_message(message_id, yadisk_getter.info_11())
        elif "10" in user_message and "–∞–Ω–≥–ª–∏–π—Å–∫" in user_message:
            bot.send_message(message_id, yadisk_getter.english_10())
        elif "11" in user_message and "–∞–Ω–≥–ª–∏–π—Å–∫" in user_message:
            bot.send_message(message_id, yadisk_getter.english_11())
        elif "10" in user_message and "—Ñ–∏–∑–∏–∫" in user_message:
            bot.send_message(message_id, yadisk_getter.physics_10())
        elif "11" in user_message and "—Ñ–∏–∑–∏–∫" in user_message:
            bot.send_message(message_id, yadisk_getter.physics_11())
        elif "10" in user_message and "—Ö–∏–º–∏" in user_message:
            bot.send_message(message_id, yadisk_getter.chemistry_10())
        elif "11" in user_message and "—Ö–∏–º–∏" in user_message:
            bot.send_message(message_id, yadisk_getter.chemistry_11())
        elif "10" in user_message and ("–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω" in user_message or "–æ–±—â–µ—Å—Ç–≤" in user_message):
            bot.send_message(message_id, yadisk_getter.social_10())
        elif "11" in user_message and ("–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω" in user_message or "–æ–±—â–µ—Å—Ç–≤" in user_message):
            bot.send_message(message_id, yadisk_getter.social_11())

        elif "–∞–ª–≥–µ–±—Ä" in user_message:
            bot.send_message(message_id, yadisk_getter.algebra())
        elif "–≥–µ–æ–≥—Ä–∞—Ñ" in user_message:
            bot.send_message(message_id, yadisk_getter.geog())
        elif "–±–∏–æ–ª–æ–≥" in user_message:
            bot.send_message(message_id, yadisk_getter.biology())
        elif "–≥–µ–æ–º–µ—Ç—Ä" in user_message:
            bot.send_message(message_id, yadisk_getter.geom())
        elif "—Ä—É—Å—Å–∫" in user_message:
            bot.send_message(message_id, yadisk_getter.russian())

        elif "—Ä–∞—Å–ø–∏—Å–∞–Ω" in user_message:
            callbacks.timetable(bot, message)

        elif "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ" in user_message or "–ø–æ—Å—Ç—É–ø–∞—Ç—å" in user_message or "–ø–æ—Å—Ç—É–ø–∏—Ç—å" in user_message:
            callbacks.universities(bot, message)

        elif "–ø–æ—Å–ª–µ–¥–Ω" in user_message and "–Ω–æ–≤–æ—Å—Ç" in user_message:
            try:
                list_of_photos, text = vk_getter.get_last_not_pinned()
                bot.send_media_group(message_id, list_of_photos)
                bot.send_message(message_id, text)
            except Exception as e:
                bot.send_message(admin_id, "error")
                bot.send_message(admin_id, str(e))

        elif "—Å–∞–π—Ç" in user_message and "–ª–∏—Ü–µ" in user_message:
            callbacks.website(bot, message)

        elif "–≤–∫" in user_message and "–≥—Ä—É–ø–ø" in user_message:
            callbacks.vkgroup(bot, message)

        elif ("–¥–∑" in user_message or "–¥–æ–º–∞—à–∫" in user_message or
              ("–¥–æ–º–∞—à–Ω" in user_message and "—Ä–∞–±–æ—Ç" in user_message)
              or ("—Å–µ—Ç–µ–≤" in user_message and "–≥–æ—Ä–æ–¥" in user_message)
              or "—Å–µ—Ç–µ–≤–æ–π" in user_message):
            callbacks.cit(bot, message)

        elif "–ø–æ–∫–∞–∂–∏ –≤—Å–µ—Ö" in user_message:
            try:
                if message.from_user.id in admin_ids:
                    bot.send_message(message_id, sql_requests.get_all_users())
                else:
                    bot.send_message(message_id, "–ß—Ç–∞?")
            except Exception as e:
                bot.send_message(admin_id, str(e))

        elif message.text == "–ø–æ–∫–∞–∂–∏ –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
            if message.from_user.id in admin_ids:
                bot.send_message(message_id, sql_requests.get_all_events_admin())
            else:
                bot.send_message(message_id, "–ß—Ç–∞?")

        elif "–æ–±–Ω–æ–≤–∏ –Ω–æ–≤–æ—Å—Ç–∏" in user_message:
            if message.from_user.id in admin_ids:
                scheduled_update()
            else:
                bot.send_message(message_id, "–ß—Ç–∞?")

        elif "—Å–µ–≥–æ–¥–Ω" in user_message and ("—Å–æ–±—ã—Ç" in user_message or "–º–µ—Ä–æ–ø—Ä–∏—è—Ç" in user_message):
            text = mark_words.get_today()
            bot.send_message(message_id, text)

        elif "–∑–∞–≤—Ç—Ä" in user_message and ("—Å–æ–±—ã—Ç" in user_message or "–º–µ—Ä–æ–ø—Ä–∏—è—Ç" in user_message):
            text = mark_words.get_tomorrow()
            bot.send_message(message_id, text)

        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä" in user_message and ("—Å–æ–±—ã—Ç" in user_message or "–º–µ—Ä–æ–ø—Ä–∏—è—Ç" in user_message):
            text = mark_words.get_after_tomorrow()
            bot.send_message(message_id, text)

        elif "–Ω–µ–¥–µ–ª" in user_message and ("—ç—Ç—É" in user_message or "—ç—Ç–æ–π" in user_message) and (
                "—Å–æ–±—ã—Ç" in user_message or "–º–µ—Ä–æ–ø—Ä–∏—è—Ç" in user_message):
            text = mark_words.during_the_week()
            bot.send_message(message_id, text)

        elif "–Ω–µ–¥–µ–ª" in user_message and "—Å–ª–µ–¥—É—é—â" in user_message and (
                "—Å–æ–±—ã—Ç" in user_message or "–º–µ—Ä–æ–ø—Ä–∏—è—Ç" in user_message):
            text = mark_words.during_the_next_week()
            bot.send_message(message_id, text)

        elif "–º–µ—Å—è—Ü" in user_message and ("—ç—Ç–æ–º" in user_message or "—ç—Ç–æ–≥–æ" in user_message) and (
                "—Å–æ–±—ã—Ç" in user_message or "–º–µ—Ä–æ–ø—Ä–∏—è—Ç" in user_message):
            text = mark_words.during_the_month()
            bot.send_message(message_id, text)

        elif "–º–µ—Å—è—Ü" in user_message and "—Å–ª–µ–¥—É—é—â" in user_message and (
                "—Å–æ–±—ã—Ç" in user_message or "–º–µ—Ä–æ–ø—Ä–∏—è—Ç" in user_message):
            text = mark_words.during_the_next_month()
            bot.send_message(message_id, text)

        elif "–≥–æ–¥" in user_message and ("—ç—Ç–æ–º" in user_message or "—ç—Ç–æ–≥–æ" in user_message) and (
                "—Å–æ–±—ã—Ç" in user_message or "–º–µ—Ä–æ–ø—Ä–∏—è—Ç" in user_message):
            text = mark_words.during_the_year()
            bot.send_message(message_id, text)

        else:
            msg = bot.send_message(message_id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å")
            bot.delete_message(msg.chat.id, msg.message_id)
            bot.send_message(message_id, chatbot.question(message))

    def deleting_sql(message):
        message_id = message.chat.id
        try:
            bot.send_message(message_id, sql_requests.delete_event(message))
        except Exception as e:
            bot.send_message(admin_id, str(e))

    def updating_sql(message):
        message_id = message.chat.id
        try:
            date = message.text[0:10:]
            event = message.text[11::]
            bot.send_message(message_id, sql_requests.update_event(date, event))
        except Exception as e:
            bot.send_message(admin_id, str(e))

    process = mp.Process(target=run_scheduler)
    process.start()
    bot.polling(non_stop=True)
    process.join()